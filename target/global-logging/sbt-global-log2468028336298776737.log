[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\bidanchr\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\bidanchr\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 11.0.12)
[debug]       Load.loadUnit: plugins took 120.2274ms
[debug]       Load.loadUnit: defsScala took 0.3099ms
[debug] [Loading] Scanning directory C:\Users\bidanchr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\bidanchr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.6063 ms
[debug]           Load.resolveProject(global-plugins) took 59.3848ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\bidanchr\.sbt\1.0\plugins, plugins: List(<none>))) took 106.4776ms
[debug] [Loading] Done in C:\Users\bidanchr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 129.4214ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3479ms
[debug]     Load.loadUnit(file:/C:/Users/bidanchr/.sbt/1.0/plugins/, ...) took 259.9994ms
[debug]   Load.apply: load took 606.0596ms
[debug]   Load.apply: resolveProjects took 8.8953ms
[debug]   Load.apply: finalTransforms took 88.7119ms
[debug]   Load.apply: config.delegates took 7.9449ms
[debug]   Load.apply: Def.make(settings)... took 616.7088ms
[debug]   Load.apply: structureIndex took 105.9317ms
[debug]   Load.apply: mkStreams took 2.1828ms
[info] loading global plugins from C:\Users\bidanchr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5589.6179ms
[debug]           Load.loadUnit: plugins took 32.9823ms
[debug]           Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory D:\UQAC\BDD\TestSpark\project
[debug]             Load.loadUnit: mkEval took 11.422ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6918 ms
[info] loading settings for project testspark-build from idea.sbt ...
[debug]               Load.resolveProject(testspark-build) took 3.3685ms
[debug]             Load.loadTransitive: finalizeProject(Project(id testspark-build, base: D:\UQAC\BDD\TestSpark\project, plugins: List(<none>))) took 5.5039ms
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark\project, returning: (testspark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 182.4072ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.2984ms
[debug]         Load.loadUnit(file:/D:/UQAC/BDD/TestSpark/project/, ...) took 219.5242ms
[debug]       Load.apply: load took 221.5259ms
[debug]       Load.apply: resolveProjects took 0.1519ms
[debug]       Load.apply: finalTransforms took 8.4762ms
[debug]       Load.apply: config.delegates took 0.3469ms
[debug]       Load.apply: Def.make(settings)... took 106.8764ms
[debug]       Load.apply: structureIndex took 63.7641ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from D:\UQAC\BDD\TestSpark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 894.8147ms
[debug]     Load.loadUnit: defsScala took 0.0044ms
[debug] [Loading] Scanning directory D:\UQAC\BDD\TestSpark
[debug]       Load.loadUnit: mkEval took 0.2197ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.505 ms
[info] loading settings for project testspark from build.sbt ...
[debug]         Load.resolveProject(testspark) took 34.2571ms
[debug]       Load.loadTransitive: finalizeProject(Project(id testspark, base: D:\UQAC\BDD\TestSpark, plugins: List(<none>))) took 38.1744ms
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark, returning: (testspark)
[debug]     Load.loadUnit: loadedProjectsRaw took 141.7374ms
[debug]     Load.loadUnit: cleanEvalClasses took 1.601ms
[debug]   Load.loadUnit(file:/D:/UQAC/BDD/TestSpark/, ...) took 1038.8131ms
[debug] Load.apply: load took 1040.4982ms
[debug] Load.apply: resolveProjects took 0.0952ms
[debug] Load.apply: finalTransforms took 27.6023ms
[debug] Load.apply: config.delegates took 0.4105ms
[debug] Load.apply: Def.make(settings)... took 95.3315ms
[debug] Load.apply: structureIndex took 23.4099ms
[debug] Load.apply: mkStreams took 0.0032ms
[info] set current project to TestSpark (in build file:/D:/UQAC/BDD/TestSpark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51393 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51393, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to TestSpark (in build file:/D:/UQAC/BDD/TestSpark/)
[debug] > Exec(idea-shell, None, None)
