[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 11.0.12)
[debug]       Load.loadUnit: plugins took 29.5006ms
[debug]       Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory C:\Users\bidanchr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\bidanchr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7804 ms
[debug]           Load.resolveProject(global-plugins) took 1.0251ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\bidanchr\.sbt\1.0\plugins, plugins: List(<none>))) took 3.2486ms
[debug] [Loading] Done in C:\Users\bidanchr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 5.6022ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.008ms
[debug]     Load.loadUnit(file:/C:/Users/bidanchr/.sbt/1.0/plugins/, ...) took 35.6848ms
[debug]   Load.apply: load took 37.2902ms
[debug]   Load.apply: resolveProjects took 0.3827ms
[debug]   Load.apply: finalTransforms took 20.8431ms
[debug]   Load.apply: config.delegates took 0.3368ms
[debug]   Load.apply: Def.make(settings)... took 68.1633ms
[debug]   Load.apply: structureIndex took 24.483ms
[debug]   Load.apply: mkStreams took 0.0022ms
[info] loading global plugins from C:\Users\bidanchr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 399.7413ms
[debug]           Load.loadUnit: plugins took 22.189ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory D:\UQAC\BDD\TestSpark\project
[debug]             Load.loadUnit: mkEval took 0.232ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.3785 ms
[info] loading settings for project testspark-build from idea.sbt ...
[debug]               Load.resolveProject(testspark-build) took 1.0246ms
[debug]             Load.loadTransitive: finalizeProject(Project(id testspark-build, base: D:\UQAC\BDD\TestSpark\project, plugins: List(<none>))) took 2.7072ms
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark\project, returning: (testspark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 16.6607ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.3774ms
[debug]         Load.loadUnit(file:/D:/UQAC/BDD/TestSpark/project/, ...) took 39.8097ms
[debug]       Load.apply: load took 40.6235ms
[debug]       Load.apply: resolveProjects took 0.0748ms
[debug]       Load.apply: finalTransforms took 4.5142ms
[debug]       Load.apply: config.delegates took 0.2542ms
[debug]       Load.apply: Def.make(settings)... took 48.8663ms
[debug]       Load.apply: structureIndex took 15.6354ms
[debug]       Load.apply: mkStreams took 0.0019ms
[info] loading project definition from D:\UQAC\BDD\TestSpark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 251.1321ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory D:\UQAC\BDD\TestSpark
[debug]       Load.loadUnit: mkEval took 0.177ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.5087 ms
[info] loading settings for project testspark from build.sbt ...
[debug]         Load.resolveProject(testspark) took 41.8755ms
[debug]       Load.loadTransitive: finalizeProject(Project(id testspark, base: D:\UQAC\BDD\TestSpark, plugins: List(<none>))) took 43.8915ms
[debug] [Loading] Done in D:\UQAC\BDD\TestSpark, returning: (testspark)
[debug]     Load.loadUnit: loadedProjectsRaw took 80.9868ms
[debug]     Load.loadUnit: cleanEvalClasses took 1.817ms
[debug]   Load.loadUnit(file:/D:/UQAC/BDD/TestSpark/, ...) took 334.4412ms
[debug] Load.apply: load took 335.4724ms
[debug] Load.apply: resolveProjects took 0.1603ms
[debug] Load.apply: finalTransforms took 14.2412ms
[debug] Load.apply: config.delegates took 0.2595ms
[debug] Load.apply: Def.make(settings)... took 63.0713ms
[debug] Load.apply: structureIndex took 14.929ms
[debug] Load.apply: mkStreams took 0.0024ms
[warn] Discarding 1 session setting.  Use 'session save' to persist session settings.
[info] set current project to TestSpark (in build file:/D:/UQAC/BDD/TestSpark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(idea-shell, None, None)
